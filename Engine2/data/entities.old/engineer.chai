var engineerScript = EntityScript();


class EngineerState 
{

    var sleeping;

    def EngineerState(entity)
    {
        this.sleeping = true;
    }
}

engineerScript.setCreateState(fun(entity) {
    return EngineerState(entity);
});

engineerScript.setOnBeginMove(fun(entity){
    if(entity.scriptState.sleeping)
    {
        entity.scriptState.sleeping = false;
    }
    entity.stopAction();

    entity.setPose("walk");
});

engineerScript.setOnEndMove(fun(entity){
    if(entity.scriptState.sleeping)
    {
        entity.scriptState.sleeping = false;
    }
    
    entity.setPose("idle");
});

engineerScript.setOnSelected(fun(entity){
    if(entity.scriptState.sleeping)
    {
        entity.setPose("idle");
        entity.playAction("wakeup");
        entity.scriptState.sleeping = false;
    }
});

engineerScript.setOnDeselected(fun(entity){
    if(!entity.scriptState.sleeping)
    {
        entity.setPose("sleep");
        entity.playAction("nightnight");
        entity.scriptState.sleeping = true;
    }
});

engineerScript.setDrawUI(fun(entity, ui){
    var tileData = game.hexGrid.getTileData(entity.tileIndex);
    var resource = tileData.getResource();

    var hasStructure = !game.entityAtHex(LI_Structure, entity.tileIndex).is_var_null();
    var canBuild = !hasStructure && entity.buildPointsLeft > 0;
    var abundance = tileData.getAbundanceAsFloat();
    var woodAbundance = tileData.getWoodAbundanceAsFloat();
    var isForested = tileData.isForested();
    var hasResource = tileData.hasResource();
    var hasWaterTile = false;

    var nbList = Hex(entity.tileIndex).neighbours();
    var numNb = nbList.size();

    var waterHex;

    for(var i = 0; i < numNb; ++i)
    {
        var nb = nbList.at(i);
        var nbIndex = nb.offsetCoords();

        var nbData = game.hexGrid.getTileData(nbIndex);
        if(nbData.is_var_null())
        {
            continue;
        }

        if(nbData.isShallowWater())
        {
            var nbHasStructure = !game.entityAtHex(LI_Structure, nbIndex).is_var_null();
            if(nbHasStructure)
            {
                continue;
            }

            waterHex = nbIndex;

            hasWaterTile = true;
            break;
        }
    }

    if(canBuild)
    {
        if(!isForested && !hasResource)
        {
            // @todo make all these check if we afford!
            if(ui.button("wf", "Build War Factory"))
            {
                game.spawnEntity("warfactory", entity.tileIndex, entity.empireId);
                --entity.buildPointsLeft;
            }
        }

        if(hasWaterTile && ui.button("navb", "Build Naval Base"))
        {
            game.spawnEntity("navalbase", waterHex, entity.empireId);

            --entity.buildPointsLeft;
        }

        if(isForested)
        {
            if(ui.button("hrvst", "Harvest Wood"))
            {
                game.harvestWood(entity.tileIndex, entity.empireId);
                --entity.buildPointsLeft;

            }

            if(ui.button("sawmill", "Build Saw Mill"))
            {
                game.spawnEntity("sawmill", entity.tileIndex, entity.empireId);

                --entity.buildPointsLeft;
            }
        }


        if(tileData.hasOre() && ui.button("orm", "Build Ore Mine"))
        {
            game.spawnEntity("oremine", entity.tileIndex, entity.empireId);
            --entity.buildPointsLeft;
        }
    }

});


engineerScript;